const mui = require('tera-toolbox-mui').DefaultInstance;
const ProcessListener = require('./process-listener');
const { execFileSync } = require('child_process');
const path = require('path');

class ProcessListenerDLLInjector {
    constructor(IsAdmin, Interval = 100) {
        this.admin = IsAdmin;
        this.listener = new ProcessListener('TERA.exe', this.handleAddedProcess.bind(this), this.handleRemovedProcess.bind(this), Interval);
    }

    destructor() {
        this.listener.stop();
        this.listener = null;
    }

    run() {
        this.listener.start();
    }

    setInterval(Interval) {
        this.listener.interval = Interval;
    }

    handleAddedProcess(process) {
        // I'll fix this later :^)
        // try {
            execFileSync(path.join(__dirname, "injector.exe"), [process.pid, path.join(__dirname, "tera-client-interface.dll"), 1])
        // } catch (e) {
        //     console.log(mui.get('tera-client-interface/process-listener-dll-injector/inject-error', {pid: process.pid}));
        //     switch (e.code) {
        //         case 'ENOENT': {
        //             console.log(mui.get('tera-client-interface/process-listener-dll-injector/inject-error-ENOENT-1'));
        //             console.log(mui.get('tera-client-interface/process-listener-dll-injector/inject-error-ENOENT-2'));
        //             break;
        //         }
        //         case 'EPERM': {
        //             console.log(mui.get('tera-client-interface/process-listener-dll-injector/inject-error-EPERM-1'));
        //             console.log(mui.get('tera-client-interface/process-listener-dll-injector/inject-error-EPERM-2'));
        //             break;
        //         }
        //         default: {
        //             switch (e.status) {
        //                 case 1: {
        //                     console.log(mui.get('tera-client-interface/process-listener-dll-injector/inject-error-default-error-1'));
        //                     if (!this.admin)
        //                         console.log(mui.get('tera-client-interface/process-listener-dll-injector/inject-error-default-error-2'));
        //                     console.log(mui.get('tera-client-interface/process-listener-dll-injector/inject-error-default-error-3'));
        //                     console.log(mui.get('tera-client-interface/process-listener-dll-injector/inject-error-default-error-4'));
        //                     break;
        //                 }
        //                 default: {
        //                     console.log(mui.get('tera-client-interface/process-listener-dll-injector/inject-error-default-unknown-1'));
        //                     console.log(mui.get('tera-client-interface/process-listener-dll-injector/inject-error-default-unknown-2'));
        //                     console.log(JSON.stringify(e));
        //                     break;
        //                 }
        //             }
        //             break;
        //         }
        //     }
        // }
    }

    handleRemovedProcess(pid) {
        // Do nothing.
    }
}

module.exports = ProcessListenerDLLInjector;
